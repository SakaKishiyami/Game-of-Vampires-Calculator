-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: 

local flatbuffers = require('core/flatbuffers')

local slgGachaConfig = {
    initComplete = false,
    dataMap = {},
    sources = nil
} -- the module
local slgGachaConfig_mt = {} -- the class metatable

function slgGachaConfig.New()
    local o = {}
    setmetatable(o, {__index = slgGachaConfig_mt})
    return o
end
function slgGachaConfig.GetRootAsslgGachaConfig(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = slgGachaConfig.New()
    o:Init(buf, n + offset)
    return o
end
function slgGachaConfig_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function slgGachaConfig_mt:Datas(j)
    local o = self.view:Offset(4)
    if o ~= 0 then
        local x = self.view:Vector(o)
        x = x + ((j-1) * 4)
        x = self.view:Indirect(x)
        local obj = require('configs/classes/slgGacha').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function slgGachaConfig_mt:DatasLength()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function slgGachaConfig.Start(builder) builder:StartObject(1) end
function slgGachaConfig.AddDatas(builder, datas) builder:PrependUOffsetTRelativeSlot(0, datas, 0) end
function slgGachaConfig.StartDatasVector(builder, numElems) return builder:StartVector(4, numElems, 4) end
function slgGachaConfig.End(builder) return builder:EndObject() end

function slgGachaConfig.Init()
    if slgGachaConfig.initComplete then
        return
    end
    local textasset = AssetLoader.Load("configs/bytes/slgGacha.bytes");
	if textasset then
		slgGachaConfig.sources = slgGachaConfig.GetRootAsslgGachaConfig(flatbuffers.binaryArray.New(textasset.bytes), 0)
		slgGachaConfig.initComplete = true
	end
end

function slgGachaConfig.Get(key)
    if slgGachaConfig.sources == nil then
        log.e("<color=red>slgGachaConfig获取出错,未初始化的配置类型</color>")
        return
    end
    if slgGachaConfig.dataMap[key] ~= nil then
        return slgGachaConfig.dataMap[key]
    end
    local _view = slgGachaConfig.sources.view
    local o = _view:Offset(4)
    if o ~= 0 then
        local vectorLocation = _view:Vector(o)
        local span = _view:Get(flatbuffers.N.Int32, vectorLocation - 4)
        local start = 0
        while span ~= 0 do
            local middle = math.floor(span / 2)
            local tableOffset = flatbuffers.view.Indirect(vectorLocation + 4 * (start + middle), _view)
            local _chk = _view:Get(flatbuffers.N.Int32, flatbuffers.view.Offset(4, _view.bytes:__len() - tableOffset, _view))
            if _chk > key then
                span = middle
            elseif _chk < key then
                middle = middle + 1
                start = start + middle
                span = span - middle
            else
                local obj = require('configs/classes/slgGacha').New()
                obj:Init(_view.bytes, tableOffset)
                slgGachaConfig.dataMap[key] = obj
                return obj
            end
        end
    end
    log.e("<color=red>slgGachaConfig获取出错, 未能找到配置{0}</color>", key)
    return nil
end

return slgGachaConfig -- return the module